<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-02-25T02:34:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Portfolio</title><subtitle>공부, 프로젝트 등을 기록하기 위한 저장 공간.</subtitle><author><name>육상은</name><email>tkddms150@naver.com</email></author><entry><title type="html">Knapsack Algorithm(배낭 알고리즘)</title><link href="http://localhost:4000/algorithm/knapsack-algorithm/" rel="alternate" type="text/html" title="Knapsack Algorithm(배낭 알고리즘)" /><published>2020-02-24T00:00:00+09:00</published><updated>2020-02-25T08:36:00+09:00</updated><id>http://localhost:4000/algorithm/knapsack-algorithm</id><content type="html" xml:base="http://localhost:4000/algorithm/knapsack-algorithm/">&lt;p&gt;(공부한 내용을 정리한 글로 부족하거나 틀린 부분이 존재할 수 있습니다.)&lt;br /&gt;
&lt;strong&gt;배낭 문제&lt;/strong&gt;란 배낭에 물건을 담을 수 있는 무게의 최댓값이 존재하고 물건당 무게와 가치가 정해져 있을 때,&lt;br /&gt;
&lt;strong&gt;가치의 합이 최대&lt;/strong&gt;가 되도록 물건들을 선택하여 배낭에 담는 문제이다.&lt;/p&gt;

&lt;p&gt;배낭문제는 크게 두가지 유형이 존재한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;물건을 나눠서 넣을 수 있는 경우 (fraction knapsack)&lt;/li&gt;
  &lt;li&gt;물건을 나눠서 넣을 수 없는 경우 (0/1 knapsack)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서는 2번을 다룰 것이면 1번에 경우 다른 블로그들을 찾아보니 그리디를 사용하여 간단하게 가능하다고 한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;물건을 나눠서 넣을 수 없는 경우에는 (0/1 knapsack) DP를 사용하여 해결할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;01-knapsack--백준-12865번-평범한-배낭&quot;&gt;0/1 Knapsack  (백준 12865번 평범한 배낭)&lt;/h2&gt;
&lt;p&gt;위에서 말한 것처럼 DP를 이용하여 문제를 해결할 수 있다.&lt;br /&gt;
물건을 나눌 수 없기 때문에 물건을 담거나 / 담지 않거나 이므로 0/1 Knapsack이라 한다.&lt;/p&gt;

&lt;p&gt;백준의 12865번 문제를 예시로 들어 설명할 것이며, 점화식을 먼저 보자.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dp[a][b] : 1부터 a번째 물건까지 사용하여 b 용량의 가방에 물건을 채울 때 최대 가치  
V[a] : a번째 물건의 가치  
W[a] : a번째 물건의 무게  

dp[a][b] = max( dp[a-1][b] , dp[a-1][b-w[a]] + v[a] )
1. b용량의 가방에 a번째 물건을 담지 않을 경우: dp[a-1][b]
	- b용량 가방은 a-1까지 물건으로 채워진 최댓값  
2. b용량의 가방에 a번째 물건을 담을 경우: dp[a-1][b-w[a]] + v[a]
	- 가방에 w[a]만큼 넣으면 남은 가방의 용량은 b-w[a]이다.  
	- (a물건의 가치) + (a-1까지 물건을 사용하여 b-w[a]용량의 가방 채웠을 때 최대 가치)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 방식으로 알고리즘이 수행된다.&lt;br /&gt;
이해를 좀 더 쉽게 하기 위해 표를 그려보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;배낭의 최대 용량 K: 7, 물건 개수 n: 4&lt;br /&gt;
W[4] : 6, 4, 3, 5 &lt;br /&gt;
V[4] : 13, 8, 6, 12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;dp의 0번째 행을 모두 0으로 채워 둔다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;물건＼용량&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;0&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;7&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1번째 물건 (무게: 6, 가치: 13)&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;물건＼용량&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;0&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;7&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;13&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;13&lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2번째 물건 (무게: 4, 가치: 8)&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;물건＼용량&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;0&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;7&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;8&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;8&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3번째 물건 (무게: 3, 가치: 6)&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;물건＼용량&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;0&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;7&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;6&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;14&lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4번째 물건 (무게: 5, 가치: 12)&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;물건＼용량&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;0&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;7&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;14&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;12&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;14&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;마지막 물건까지 수행 후 dp[4][7]에 들어 있는 값이 최종 답이 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;algorithm&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// [용량] = 최대 가치&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//물건 개수, 최대 용량&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//물건 정보 {무게,가치}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//무게가 k 초과인 물건은 필요없으므로&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//dp - 용량을 뒤에서 부터 볼 경우 1차원 배열로 가능하다. (앞에서 부터 볼 경우 앞에 값들은 계산하며 사용될 수 있어서 2차원 배열 사용해야 함)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="DP" /><summary type="html">가능한 무게의 최댓값과 물품당 무게와 가치가 정해져있을 때, 가치의 합이 최대가 되도록 물품을 선택하는 문제</summary></entry><entry><title type="html">백준 12865번 평범한 배낭</title><link href="http://localhost:4000/problem/knapsack-problem1/" rel="alternate" type="text/html" title="백준 12865번 평범한 배낭" /><published>2020-02-24T00:00:00+09:00</published><updated>2020-02-25T08:36:00+09:00</updated><id>http://localhost:4000/problem/knapsack-problem1</id><content type="html" xml:base="http://localhost:4000/problem/knapsack-problem1/">&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;이 문제는 아주 평범한 배낭에 관한 문제이다.&lt;br /&gt;
한 달 후면 국가의 부름을 받게 되는 준서는 여행을 가려고 한다. 세상과의 단절을 슬퍼하며 최대한 즐기기 위한 여행이기 때문에, 가지고 다닐 배낭 또한 최대한 가치 있게 싸려고 한다.&lt;br /&gt;
준서가 여행에 필요하다고 생각하는 N개의 물건이 있다. 각 물건은 무게 W와 가치 V를 가지는데, 해당 물건을 배낭에 넣어서 가면 준서가 V만큼 즐길 수 있다. 아직 행군을 해본 적이 없는 준서는 최대 K무게까지의 배낭만 들고 다닐 수 있다. 준서가 최대한 즐거운 여행을 하기 위해 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 알려주자.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;
&lt;p&gt;첫 줄에 물품의 수 N(1 ≤ N ≤ 100)과 준서가 버틸 수 있는 무게 K(1 ≤ K ≤ 100,000)가 주어진다. 두 번째 줄부터 N개의 줄에 거쳐 각 물건의 무게 W(1 ≤ W ≤ 100,000)와 해당 물건의 가치 V(0 ≤ V ≤ 1,000)가 주어진다.&lt;br /&gt;
입력으로 주어지는 모든 수는 정수이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참조&lt;br /&gt;
&lt;a href=&quot;https://www.acmicpc.net/problem/12865&quot;&gt;https://www.acmicpc.net/problem/12865&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;p&gt;이 문제에 대한 풀이는 knapsack algorithm 설명하는 글에 적어 놓았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution Link&lt;/strong&gt; → &lt;a href=&quot;https://yuksangeun.github.io/algorithm/knapsack-algorithm&quot;&gt;풀이&lt;/a&gt;&lt;/p&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="DP" /><summary type="html">Knapsack 문제</summary></entry><entry><title type="html">LCS(최장 공통 부분 수열)</title><link href="http://localhost:4000/algorithm/LCS/" rel="alternate" type="text/html" title="LCS(최장 공통 부분 수열)" /><published>2020-02-21T00:00:00+09:00</published><updated>2020-02-22T03:19:00+09:00</updated><id>http://localhost:4000/algorithm/LCS</id><content type="html" xml:base="http://localhost:4000/algorithm/LCS/">&lt;p&gt;이전 포스트에서 DP에 대해 설명한 글이 있다. LCS는 &lt;strong&gt;DP를 기반&lt;/strong&gt;으로 하여 &lt;strong&gt;최장 공통 부분 수열을 찾는&lt;/strong&gt; 알고리즘이다.&lt;/p&gt;

&lt;h2 id=&quot;lcslongest-common-subsequence-최장-공통-부분-수열&quot;&gt;LCS(Longest Common Subsequence, 최장 공통 부분 수열)&lt;/h2&gt;
&lt;p&gt;LCS란 가장 긴 공통 Subsequence를 찾는 알고리즘으로 이때 substring 과 구분해야한다.&lt;br /&gt;
Substring이란 &lt;strong&gt;연속된&lt;/strong&gt; 부분 문자열을 의미하며, Subsequence란 &lt;strong&gt;연속적이지 않은&lt;/strong&gt; 부분 문자열을 의미한다.&lt;br /&gt;
아래 표를 통해 문자열 “ABCDE” 와 “ACDF” 를 비교하여 가장 긴 공통 substring, subsequence 찾은 결과를 보자.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;문자열&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ABCDE : ACDF&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Substring&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;CD&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Subsequence&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ACD&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;표와 같이 substring은 &lt;strong&gt;연속된&lt;/strong&gt; 부분 문자열을 찾아야 하므로 이 경우 “A”, “CD” 가 존재한다. 이 중 길이가 더 긴 것이 “CD”이다.&lt;br /&gt;
반면 subsequence는 &lt;strong&gt;연속적이지 않은&lt;/strong&gt; 공통 부분 문자열을 찾아야 하므로 substring에서 찾은 두 구간을 합치면 된다. 즉 “ACD”가 된다.&lt;br /&gt;
즉, subsequence는 연속적이지는 않지만 “ACD” 순서로 두 문자열에 문자가 존재하면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;LCS 알고리즘&lt;/strong&gt;을 통해 두개의 문자열을 비교하여 공통 부분 수열의 &lt;strong&gt;길이&lt;/strong&gt;를 구할 수 있으며, &lt;strong&gt;역추적&lt;/strong&gt;을 통해 &lt;strong&gt;공통 부분 수열&lt;/strong&gt;을 찾을 수 있다.&lt;/p&gt;

&lt;p&gt;LCS는 대표적으로 &lt;strong&gt;염기서열 유사성 분석&lt;/strong&gt;에서 쓰이며, 대학 수업 중 ‘생명’관련 전공 수업에서 염기서열 유사성을 분석하기 위하여 배웠다.&lt;/p&gt;

&lt;h2 id=&quot;lcs의-길이-구하기&quot;&gt;LCS의 길이 구하기&lt;/h2&gt;
&lt;p&gt;위에서 LCS 알고리즘은 DP를 기반으로 한다는 것을 언급했다. 먼저 점화식을 보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String1, String2가 있을 때 x는 String1의 x번째 위치, y는 String2의 y번째 위치  
1. if String1[x] == String2[y] then, dp[x][y] = dp[x-1][y-1] + 1  
2. if String1[x] != String2[y] then, dp[x][y] = max(dp[x-1][y], dp[x][y-1])  
(x=[1,...,n] , y=[1,...,k])  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 점화식을 토대로 두 개의 문자열 ‘ACAYKP’, ‘CAPCAK’ 에 관한 dp표를 만들어보자.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;__&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;A&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;C&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;A&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Y&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;K&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;P&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;__&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;K&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이와 같이 dp표를 채울 수 있고 dp[1][1]부터 dp[n][k]까지 차근차근 채워나가면 된다.&lt;br /&gt;
위 표는 dp[i][j]일 경우 string1의 i번째 까지 문자열, string2의 j번째 까지 문자열을 비교했을 때 계산된 LCS 길이 값을 저장한 표이며,&lt;br /&gt;
맨 마지막 위치인 dp[6][6]의 값이 바로 두 개의 문자열을 비교하여 얻을 수 있는 LCS의 길이 값이다.&lt;br /&gt;
따라서 위 두개의 문자열을 비교하여 찾을 수 있는 LCS의 길이는 4가 된다는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;다음으로 역추적을 통해 LCS를 찾아보자.&lt;/p&gt;

&lt;h2 id=&quot;lcs-찾기&quot;&gt;LCS 찾기&lt;/h2&gt;
&lt;p&gt;역추적하는 방법은 &lt;strong&gt;LCS 길이 구하기&lt;/strong&gt; 에서 사용한 점화식을 이용하여 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String1, String2가 있을 때 x는 String1의 x번째 위치, y는 String2의 y번째 위치  
1. if String1[x] == String2[y] then, dp[x][y] = dp[x-1][y-1] + 1  
2. if String1[x] != String2[y] then, dp[x][y] = max(dp[x-1][y], dp[x][y-1])  
(x=[1,...,n] , y=[1,...,k])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 점화식을 보면 길이를 찾을 때,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;string1[x] == string2[y] 일 경우, dp[x-1][y-1]에서 dp[x][y]로 이동한다.&lt;/li&gt;
  &lt;li&gt;string1[x] != string2[y] 일 경우, dp[x-1][y]와 dp[x][y-1] 중 큰 값이 있는 위치에서 dp[x][y]로 이동한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;따라서 역추적할 경우 거꾸로 생각하면,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. string1[x] == string2[y] 일 경우, dp[x][y]에서 dp[x-1][y-1]로 이동하면 되고 String1[x] 문자가 공통으로 존재하는 것을 알 수 있다.(string2[y]로 해도 됨)  
2. string1[x] != string2[y] 일 경우, dp[x][y]에서 dp[x-1][y]와 dp[x][y-1] 중 큰 값이 있는 위치로 이동한다.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 이동하며 역추적을 하고 1번일 경우에 dp[x][y]위치의 값을 반환하다보면 LCS를 찾을 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;__&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;A&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;C&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;A&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Y&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;K&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;P&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;__&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;0&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;0&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;2&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;3&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;3&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;K&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;4&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;4&lt;/span&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;표에 표시된 빨간색, 파란색을 따라서 역추적을 하며, 파란색 위치 해당하는 문자를 뽑으면, “ACAK”이다.&lt;br /&gt;
즉, 문자열 ‘ACAYKP’와 ‘CAPCAK’의 LCS는 ‘ACAK’ 이고 길이는 4인 것을 알 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;코드백준-9252번-lcs-2&quot;&gt;코드(백준 9252번 LCS 2)&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;vector&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//매칭 값 저장 - 크게 삽입/삭제/변형 으로 나뉜다.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;backTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;backTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;backTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//dp&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//역추적&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;backTracking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="DP" /><summary type="html">DP를 기반으로 하는 Longest Common Subsequence알고리즘</summary></entry><entry><title type="html">Greedy Algorithm(탐욕 알고리즘)</title><link href="http://localhost:4000/algorithm/greedy-algorithm/" rel="alternate" type="text/html" title="Greedy Algorithm(탐욕 알고리즘)" /><published>2020-02-21T00:00:00+09:00</published><updated>2020-02-21T03:19:00+09:00</updated><id>http://localhost:4000/algorithm/greedy-algorithm</id><content type="html" xml:base="http://localhost:4000/algorithm/greedy-algorithm/">&lt;p&gt;답을 찾을 때 여러 개의 조각으로 쪼개고, 각 단계마다 답의 한 부분을 만들어 간다는 점에서 완전탐색이나 동적계획법과 동일하다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;차이&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;완전탐색, 동적계획법&lt;/td&gt;
      &lt;td&gt;모든 선택지를 고려해 보고 그 중 전체 답이 가장 좋은 것을 찾는다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;탐욕 알고리즘&lt;/td&gt;
      &lt;td&gt;미래를 생각하지 않고 지금 단계에서 가장 좋은 방법만을 선택한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;사용-경우&quot;&gt;사용 경우&lt;/h2&gt;
&lt;p&gt;탐욕법을 사용해도 항상 최적해를 구할 수 있는 문제를 만난 경우, DP보다 수행시간이 훨씬 빠르므로 유용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt;&lt;br /&gt;
최적해를 얻을 수 있는 접근이 직관적이지 않은 경우도 많기 때문에 실수에 유의해야 하며 알고리즘의 정당성을 증명하는 과정을 빼먹지 않고 연습하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;그리디 알고리즘으로 최적의 해를 구할 수 있는 문제가 많지 않다.
    &lt;ul&gt;
      &lt;li&gt;global maximum으로 향하는 길에 시작점에 따라 현재 시점이 최고라 여겨지는 곳이 존재하여 local maximum에 빠지는 경우가 있다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://yuksangeun.github.io/assets/images/greedy_localmaximum.png&quot; alt=&quot;local maximum&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;구할 수 있다면 성질이 동일하게 보존되므로 같은 전략을 반복해서 사용하여 정답을 얻을 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;예제1---동전-개수&quot;&gt;예제1 - 동전 개수&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;- 10원, 50원, 100원, 500원짜리 동전들을 이용하여 어떤 금액을 표현하자. 이때 각 동전은 무수히 많은 대신 동전 개수를 최소로 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;풀이&lt;/strong&gt;- 무조건 사용할 수 있는 한 가장 큰 금액의 동전을 많이 사용하면 됨&lt;br /&gt;
ex)620원 : 500 + 100 + 10 + 10 //최소 동전 개수 4개&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 방식이 성립하는 이유&lt;/strong&gt;-  사용 가능한 동전 500,100,50,10을 보면 큰 쪽이 작은 쪽 액수의 배수가 되기 때문!&lt;br /&gt;
즉 큰 금액의 동전을 자신의 약수인 더 작은 여러 개의 동전들로 교체하면 동전 개수가 반드시 늘어나지만, 작은 동전들을 모아 큰 동전 액수를 만들 수 있다면 동전 개수 줄일 수 있다.&lt;br /&gt;
배수관계가 아닐 경우 – 60, 50, 10&lt;br /&gt;
220원 = 60&lt;em&gt;3 + 10&lt;/em&gt;4 //총 7개 (위 풀이 방식대로 할 경우)&lt;br /&gt;
220원 = 60&lt;em&gt;2 + 50&lt;/em&gt;2 // 총 2개&lt;/p&gt;

&lt;h2 id=&quot;예제2---도시락-문제&quot;&gt;예제2 - 도시락 문제&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;- N개의 도시락이 있고, 전자레인지는 단 한 대만 존재하며 한 번에 하나의 도시락만 데울 수 있고, 각 도시락은 조리시간과 먹는 시간이 다르게 정해져 있다. 이때 도시락을 적절한 순서로 조리하여 첫 번째 도시락을 데우기 시작한 순간부터 모든 도시락을 먹는 데 걸리는 시간이 최소가 되게 해야 한다. (다 데운 도시락은 바로 누군가가 먹는다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;풀이&lt;/strong&gt;- 먹는 데 시간이 오래 걸리는 도시락부터 순서대로 데우면 된다!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이유&lt;/strong&gt;- 도시락을 데우고 나서 바로 다른 도시락을 데우는 걸 반복하고, 각 도시락을 데우는 시간은 정해져 있으므로 우리는 도시락을 데우는 시간을 줄일 수 없다.&lt;br /&gt;
그러나 만약 마지막으로 데운 도시락을 먹는 데 오랜 시간이 걸린다면 전체 시간이 길어질 것이므로 오래 걸리는 것을 먼저 데우고 먼저 먹기 시작하는 것이 좋다.&lt;br /&gt;
도시락1, 데우는 시간 C1, 먹는 시간 E1 / 도시락2, 데우는 시간 C2, 먹는 시간 E2 / E1 &amp;gt;= E2&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;c2-&amp;gt;c1 시간: c2 + c1 + max(e1, e2-c1) = c2+c1+e1&lt;/li&gt;
  &lt;li&gt;c1-&amp;gt;c2 시간: c1+ c2 + max(e2, e1-c2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉 먹는 시간이 더 긴 도시락을 나중에 데우는 것이 먼저 데우는 것보다 항상 총시간이 길다&lt;/p&gt;

&lt;h2 id=&quot;코드동전개수&quot;&gt;코드(동전개수)&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	  #include&amp;lt;stdio.h&amp;gt;  
	  using namespace std;
	  int main() {
	       int n, k, coin[10];	//동전 종류, K원
	       int cnt = 0;	//필요한 동전 개수
	       scanf(&quot;%d %d&quot;, &amp;amp;n, &amp;amp;k);
	       for (int i = 0; i &amp;lt; n; i++)
	            scanf(&quot;%d&quot;, &amp;amp;coin[i]);
	       //금액이 큰 동전부터 차례로 보기
	       for (int i = n - 1; i &amp;gt;= 0; i--) {
	            cnt += k / coin[i];	//필요 개수
	            k = k % coin[i];	//이후 남은 금액
	       }
	       printf(&quot;%d&quot;, cnt);
	  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="greedy" /><summary type="html">미래를 생각하지 않고 각 단계에서 최선의 선택을 하는 알고리즘</summary></entry><entry><title type="html">Floyd(플로이드)</title><link href="http://localhost:4000/algorithm/floyd/" rel="alternate" type="text/html" title="Floyd(플로이드)" /><published>2020-02-20T00:00:00+09:00</published><updated>2020-02-21T03:19:00+09:00</updated><id>http://localhost:4000/algorithm/floyd</id><content type="html" xml:base="http://localhost:4000/algorithm/floyd/">&lt;p&gt;최단 경로를 구하는 알고리즘 중 하나로 &lt;strong&gt;모든 쌍 최단 거리 알고리즘&lt;/strong&gt;에 속한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;모든 쌍 최단 거리 알고리즘&lt;/strong&gt;은 말 그대로 모든 정점 쌍에 대한 최단 거리를 계산하는 것이다.&lt;br /&gt;
가장 간단한 방법으로는 &lt;strong&gt;다익스트라&lt;/strong&gt;를 이용하는 방법이 있다. 즉 각 정점을 시작점으로 하여 다익스트라 알고리즘을 수행하는데 이때 다익스트라를 모든 정점에 대해서 수행한다.&lt;br /&gt;
시간 복잡도는 O(V(E+VlogV))이다.&lt;/p&gt;

&lt;p&gt;다익스트라를 이용하는 것보다 더 간단한 방법이 있는데, 바로 &lt;strong&gt;플로이드&lt;/strong&gt;이다.&lt;br /&gt;
다익스트라를 이용하는 방법은 모든 정점에 대해 다익스트라를 시행해야 하는 반면, &lt;strong&gt;플로이드&lt;/strong&gt;는 단 한번의 시행으로 모든 쌍의 최단 거리를 구할 수 있다.&lt;br /&gt;
3중 for문을 사용하며 시간복잡도는 O(V * V * V)이다.&lt;/p&gt;

&lt;h2 id=&quot;플로이드&quot;&gt;플로이드&lt;/h2&gt;
&lt;p&gt;Dist[u][v]: 정점u에서 정점v로 가는 최단 거리 (정점 0,1,…,k)&lt;br /&gt;
C(k,u,v): 0번 정점부터 k번 정점까지만을 경유점으로 썼을 때, u에서 v까지 가는 최단 경로의 길이&lt;br /&gt;
	u -&amp;gt; v / u -&amp;gt; (0,1,….,k) -&amp;gt; v&lt;br /&gt;
시간복잡도 O(V * V * V)&lt;br /&gt;
공간복잡도 (V*V)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;점화식&lt;/strong&gt;&lt;br /&gt;
C(k,u,v) = min(C(k-1,u,k) + C(k-1,k,v) , C(k-1,u,v))&lt;br /&gt;
위 점화식과 같이 u에서 v로 가는 최단 경로에는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;k를 거쳐가는 최단 경로&lt;/li&gt;
  &lt;li&gt;k를 거치지 않고 가는 최단 경로&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;두가지가 존재한다.&lt;br /&gt;
위 점화식을 토대로 코드를 보자.&lt;/p&gt;

&lt;h2 id=&quot;코드백준-11404번-플로이드&quot;&gt;코드(백준 11404번 플로이드)&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	  //dist[100][100] 모든 dist[i][j] 값에 무한대 값을 넣는다.(초기 거리가 무한대로 설정)
	  //단, 자기 자신과의 거리는 0으로 지정  
	  //이후 입력값에 따라 인접한 곳들은 dist[i][j]에 값을 넣는다.
	  //플로이드 알고리즘
	  for (int k = 0; k &amp;lt; n; k++) {
	       for (int i = 0; i &amp;lt; n; i++) {
	            for (int j = 0; j &amp;lt; n; j++)
	                 dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
	       }
	  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;응용&quot;&gt;응용&lt;/h2&gt;
&lt;p&gt;추가로 최단경로 찾기 이외에도 모든 쌍에 대해 i-&amp;gt;j로 도달 가능한지 유무 확인 문제에서도 사용할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;모든쌍 최단 거리 사용 알고리즘&lt;/th&gt;
      &lt;th&gt;음수 가중치 존재&lt;/th&gt;
      &lt;th&gt;유용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;다익스트라&lt;/td&gt;
      &lt;td&gt;사용불가&lt;/td&gt;
      &lt;td&gt;간선이 적으면 유용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;플로이드&lt;/td&gt;
      &lt;td&gt;사용가능&lt;/td&gt;
      &lt;td&gt;간선이 많으면 E=V*V 유용&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="Graph" /><summary type="html">최단 경로 알고리즘</summary></entry><entry><title type="html">Dijkstra(다익스트라)</title><link href="http://localhost:4000/algorithm/dijkstra/" rel="alternate" type="text/html" title="Dijkstra(다익스트라)" /><published>2020-02-19T00:00:00+09:00</published><updated>2020-02-20T03:19:00+09:00</updated><id>http://localhost:4000/algorithm/dijkstra</id><content type="html" xml:base="http://localhost:4000/algorithm/dijkstra/">&lt;p&gt;다익스트라 알고리즘은 최단 경로 알고리즘(다익스트라, 벨만-포드, 플로이드) 중 하나이다.&lt;br /&gt;
이후 플로이드 알고리즘에 대한 글을 작성할 예정이며, 벨만-포드는 잘 사용되지 않으므로 넘어간다.&lt;/p&gt;

&lt;h2 id=&quot;최단-경로-문제&quot;&gt;최단 경로 문제&lt;/h2&gt;
&lt;p&gt;주어진 두 정점을 연결하는 가장 짧은 경로의 길이를 찾는 문제&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;가중치가 없는 그래프의 경우 BFS로 찾기가 가능하다.&lt;/li&gt;
  &lt;li&gt;가중치가 있는 그래프 경우 dijkstra를 이용한다.&lt;/li&gt;
  &lt;li&gt;방향 그래프를 기준으로 수행할 것이며, 무방향 그래프일 경우 선을 두개의 방향 선으로 쪼개어 방향 그래프로 만든다.&lt;/li&gt;
  &lt;li&gt;ex) a - b ==&amp;gt; a -&amp;gt; b , b -&amp;gt; a 두가지 방향을 쪼갠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;가중치가-있는-그래프&quot;&gt;가중치가 있는 그래프&lt;/h2&gt;
&lt;p&gt;간선(u,v)의 가중치를 w(u,v)로 표기하며, 최단 경로 찾는 알고리즘은 크게 두가지 유형으로 나뉜다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;단일 시작점 알고리즘: 하나의 시작점에서 다른 모든 정점까지 가는 최단 거리를 구한다.(다익스트라)&lt;/li&gt;
  &lt;li&gt;모든 쌍 알고리즘: 모든 정점의 쌍에 대한 최단 거리를 계산한다.(플로이드)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt; - 가중치 그래프의 경우 음수 간선이 존재할 수 있고 다익스트라를 이용시 최단 경로를 정확하게 찾을 수 없다.( 음수 사이클이 발생할 수 있기 때문)&lt;br /&gt;
따라서 음수 간선이 존재하는 경우에는 다익스트라 알고리즘을 사용할 수 없으며 이 경우 &lt;strong&gt;벨만-포드, 플로이드 알고리즘&lt;/strong&gt;을 이용한다.&lt;/p&gt;

&lt;h2 id=&quot;다익스트라&quot;&gt;다익스트라&lt;/h2&gt;
&lt;p&gt;단일 시작점 최단 경로 알고리즘으로 BFS와 유사하다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;차이점
    &lt;ul&gt;
      &lt;li&gt;시작점과 거리가 짧은 순서에 있는 노드부터 사용할 것이기 때문에 우선순위 큐(prirority queue)를 사용하여 {-거리, 정점} 형식으로 저장한다.&lt;/li&gt;
      &lt;li&gt;우선순위 큐는 내림차순 정렬이므로 거리가 짧은 순으로 찾기 위해 거리에 &lt;strong&gt;-&lt;/strong&gt;를 붙여 저장한다.&lt;/li&gt;
      &lt;li&gt;BFS 경우 visited[]배열을 사용하여 방문된 경우 다시 방문하지 않지만, 다익스트라는 각 정점까지의 최단 거리가 갱신될 수 있으므로 dist[]배열을 이용하여 더 짧은 거리를 찾는 경우 다시 방문한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;우선순위 큐는 정점까지의 최단 거리를 기준으로 배열함으로써, 아직 방문하지 않은 정점 중 시작점으로부터의 거리가 가장 가까운 점을 찾는 과정을 간단하게 해준다.&lt;/li&gt;
  &lt;li&gt;알고리즘 작동 방식
    &lt;ol&gt;
      &lt;li&gt;아직 방문하지 않은 정점들 중 거리가 가장 짧은 정점을 하나 선택해 방문한다.&lt;/li&gt;
      &lt;li&gt;해당 정점에서 인접하고 아직 방문하지 않은 정점들의 거리를 갱신한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;코드(백준 1753번 최단 경로)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   #include&amp;lt;stdio.h&amp;gt;
   #include&amp;lt;vector&amp;gt;
   #include&amp;lt;queue&amp;gt;
   using namespace std;
	  
   int maxV = 1000000000;	//시작 노드부터의 가장 긴 길이 설정
   int V, E, K;	//노드 수, 간선 수, 시작 번호
   vector&amp;lt; vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt; adj;
   vector&amp;lt;int&amp;gt; dist;

   void dijkstra() {
        priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; pq;	//{-거리, 노드번호}
        dist[K-1] = 0;
        pq.push({ 0, K-1 });
        while(!pq.empty()) {
             int here = pq.top().second;
             int cost = -pq.top().first;
             pq.pop();
             if(dist[here] &amp;lt; cost) continue;	//기존에 찾은 경로가 더 짧은 경로일 경우 pass
             for( auto next : adj[here] ) {
                  int nextD = cost + next.second;
                  if( dist[next.first] &amp;gt; nextD )	//현재 찾은 경로가 더 짧은 경로인 경우
                       dist[next.first] = nextD; //갱신
                       pq.push({-nextD, next.first});
                  }
             }
        }
   }
	  
   int main() {
        scanf(&quot;%d %d %d&quot;, &amp;amp;V, &amp;amp;E, &amp;amp;K);
        adj.resize(V);
        dist.resize(V);
        for( int i = 0; i &amp;lt; E; i++ ) {
             int u, v, w;
             scanf(&quot;%d %d %d&quot;, &amp;amp;u, &amp;amp;v, &amp;amp;w);
             adj[u-1].push_back({v-1, w});
        }
        //dist배열 초기화
        for(int i = 0; i &amp;lt; V; i++) dist[i] = maxV;
        dijkstra();
        for(int i = 0; i &amp;lt; V; i++) {
             if ( dist[i] == maxV ) printf(&quot;INF\n&quot;);
             else printf(&quot;%d\n&quot;, dist[i]);
        }
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;시간복잡도 O(ElogV)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="Graph" /><summary type="html">최단 경로 알고리즘</summary></entry><entry><title type="html">Parametric Search</title><link href="http://localhost:4000/algorithm/parametric-search/" rel="alternate" type="text/html" title="Parametric Search" /><published>2020-02-18T00:00:00+09:00</published><updated>2020-02-18T21:59:00+09:00</updated><id>http://localhost:4000/algorithm/parametric-search</id><content type="html" xml:base="http://localhost:4000/algorithm/parametric-search/">&lt;p&gt;Binary Search를 응용한 방법이며, 기본적인 탐색 방법은 Binary Search와 비슷하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;차이&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;알고리즘&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;탐색범위&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;수행&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;binary search&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;배열 값들을 기준으로 탐색&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mid값과의 일치여부로 판단&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;parametric search&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;실수 범위에서 이진탐색&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;비교함수 사용하여 판단&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;parametric search은 주로 내가 원하는 조건을 만족하는 가장 알맞은 값을 특정한 오차범위 이내에서 알고자 할 때 사용한다.&lt;br /&gt;
ex) y = x^2 + x + 1라는 식이 주어질 때, 1&amp;lt;x&amp;lt;10, y = 5인 경우에 해당하는 x를 구해라.&lt;br /&gt;
이때 비교함수는 &lt;strong&gt;5 = x^2 + x + 1&lt;/strong&gt;이 되며 x범위에 대해 식에 값을 넣어 5보다 큰지, 작은지 여부를 따지며 x를 찾는다.&lt;/p&gt;

&lt;p&gt;Parametric search의 경우는 일반적인 구현이 없고 문제에 따라 비교함수를 적절히 만들어야 한다.&lt;br /&gt;
&lt;strong&gt;주의&lt;/strong&gt;: mid값 구할 때 (+)에서 오버플로우 발생하지 않도록 long long 자료형을 이용하자&lt;/p&gt;

&lt;h2 id=&quot;예제-백준-2805번-나무자르기&quot;&gt;예제 (백준 2805번 나무자르기)&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	  #include&amp;lt;stdio.h&amp;gt;
	  #include&amp;lt;vector&amp;gt;
	  using namespace std;
	  /*
	  [start - 조건을 만족하는 최대 높이, end - 조건을 불만족하는 최소 높이]
	  sum - mid로 나무들 절단 후 가져갈 총 길이 합
	  sum &amp;gt;= m : 높이 mid에서 조건 만족하므로 start = mid
	  sum &amp;lt; m : 높이 mid에서 조건 불만족하므로 end = mid
	  (start, end) 사이에 중간값 없을 경우 start값이 답 
	  */
	  
	  int func(vector&amp;lt;int&amp;gt; tree, int start, int end, int m) {	//나무 높이 정보, 시작범위, 끝 범위
	       while (end - start &amp;gt; 1) {	//범위가 (start, start+1)이전까지
	       int mid = (start + end) / 2;
	       long long sum = 0;
	       //분리된 나무 총 길이
	       for (int i = 0; i &amp;lt; tree.size(); i++)
	            sum += ((tree[i] - mid) &amp;gt; 0 ? tree[i] - mid : 0);
	       if (sum &amp;gt;= m)	//mid로 m 이상의 길이 가져갈 수 있음
	            start = mid;
	       else //mid로 m 이상의 길이 가져갈 수 없음
	            end = mid;
	       }
	       return start;
	  }
	  
	  int main() {
	       int n, m;	//나무의 수, 가져가고 싶은 나무 길이
	       int maxT = 0;	//최대 나무 높이(초기 범위 지정시 사용)
	       vector&amp;lt;int&amp;gt; tree;
	  
	       scanf(&quot;%d %d&quot;, &amp;amp;n, &amp;amp;m);
	       tree.resize(n);
	       for (int i = 0; i &amp;lt; n; i++) {
	            scanf(&quot;%d&quot;, &amp;amp;tree[i]);
	       if (maxT &amp;lt; tree[i])	maxT = tree[i];
	       }
	       printf(&quot;%d&quot;, func(tree, 0, maxT, m));
	  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고&lt;br /&gt;
https://palyoung.tistory.com/40&lt;br /&gt;
https://m.blog.naver.com/PostView.nhn?blogId=kks227&amp;amp;logNo=220777333252&amp;amp;referrerCode=0&amp;amp;searchKeyword=binary%20search&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="Binary Search" /><summary type="html">binary search를 응용한 탐색 방법</summary></entry><entry><title type="html">Binary Search(이진탐색/ 이분탐색)</title><link href="http://localhost:4000/algorithm/binary-serach/" rel="alternate" type="text/html" title="Binary Search(이진탐색/ 이분탐색)" /><published>2020-02-17T00:00:00+09:00</published><updated>2020-02-18T08:43:00+09:00</updated><id>http://localhost:4000/algorithm/binary-serach</id><content type="html" xml:base="http://localhost:4000/algorithm/binary-serach/">&lt;p&gt;탐색에는 기본적으로 순차 탐색이 있으며, 이 방법은 순차적으로 모든 데이터를 체크하여 값을 찾아가며 시간복잡도가 O(N)이다.&lt;br /&gt;
반면, 이진 탐색은 탐색 범위를 절반씩 줄여가며 찾아가는 탐색 방법으로 시간복잡도가 O(logN)이다.&lt;br /&gt;
&lt;strong&gt;point&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이진탐색의 경우 탐색하고자 하는 배열이 정렬되어 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;algorithm&lt;/strong&gt; 헤더에 존재하는 &lt;strong&gt;sort함수&lt;/strong&gt;를 사용하여 정렬을 수행하고 시간복잡도는 O(NlogN)이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;진행-순서&quot;&gt;진행 순서&lt;/h2&gt;
&lt;p&gt;arr[9] = {1, 2, 3, 7, 9, 12, 21, 23, 37} 에서 4를 찾는 경우&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;순차 탐색 경우: arr[0]부터 arr[8]까지 4와 일치여부를 모두 검사한다.&lt;/li&gt;
  &lt;li&gt;이분 탐색 경우: 초기 범위의 start=arr[0], end=arr[8]로 지정 후 범위의 중간인 arr[4]를 찾는 값과 비교하여 범위를 재지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://yuksangeun.github.io/assets/images/binarySearch.PNG&quot; alt=&quot;이분 탐색 진행 순서&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;
&lt;p&gt;이분 탐색은 일반 반복문 또는 재귀함수를 사용하여 나타낼 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;일반 반복문&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   int BinarySerach(int arr[], int target) {
        int start = 0;
        int end = arr.length - 1;
        int mid = (end + start) / 2;
        while(end &amp;gt;= start) {	//start가 end보다 값이 작거나 같은 경우 반복
             if( arr[mid] == target ) return mid;	//경우1: 배열에서 target 찾은 경우 위치 반환
             else if( arr[mid] &amp;lt; target ) start = mid + 1;	//경우2: target이 배열 중간보다 오른쪽인 경우
             else end = mid - 1;	//경우3: target이 배열 중간보다 왼쪽인 경우
             mid = (end + start) / 2;	//탐색 범위 재조정했으므로 mid값 다시 찾기
        }
        return -1;	//경우4: 배열속에서 target 못 찾은 경우
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;재귀함수&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   int arr[];	//전역변수로 지정
   int BinarySerach(int start, int end, int target) {
        int mid = (end + start) / 2;
        if(start &amp;gt; end) return -1;	//경우4: 배열속에서 target 못 찾은 경우
        if( arr[mid] == target ) return mid;	//경우1: 배열에서 target 찾은 경우 위치 반환
        else if( arr[mid] &amp;lt; target ) start = mid + 1;	//경우2: target이 배열 중간보다 오른쪽인 경우
        else end = mid - 1;	//경우3: target이 배열 중간보다 왼쪽인 경우
	       
        BinarySearch(arr, start, end, target);	//범위 재조정 후 재귀 호출
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;p&gt;binarySearch 알고리즘은 실제로 &lt;strong&gt;algorithm&lt;/strong&gt;헤더에 존재한다.&lt;br /&gt;
사용이 많이 되므로 동작이 수행되는 방법을 알고 있는 것이 좋으며, 헤더에 존재하는 함수를 사용할 때와 직접 코드를 작성하여 사용하는 경우 둘 다 걸리는 시간이 똑같다.&lt;/p&gt;

&lt;p&gt;binarySearch 알고리즘의 일부를 살짝 수정하면 &lt;strong&gt;하한선/상한선&lt;/strong&gt;을 찾아주는 알고리즘을 만들 수 있다.&lt;br /&gt;
ex) 10 20 20 30 40 순으로 값이 배열되어 있을 때, target = 20이라 하자.&lt;br /&gt;
하한선의 경우: 20이상을 처음 찾는 위치를 반환하며 이 경우 위치 1에 해당한다.&lt;br /&gt;
상한선의 경우: 20을 초과하는 처음 위치를 반환하며 이 경우 위치 3에 해당한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;하한선 코드 (lower_bound)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   int lower_bound(int arr[], int target) {
        int start = 0;
        int end = arr.length - 1;
        while(start &amp;lt;= end) {
             int mid = (start + end) / 2;
             if(arr[mid] &amp;lt; target) start = mid + 1;
             else end = mid - 1;
        }
        return end+1;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상한선 코드 (upper_bound)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   int upper_bound(int arr[], int target) {
        int start = 0;
        int end = arr.length - 1;
        while(start &amp;lt;= end) {
             int mid = (start + end) / 2;
             if(arr[mid] &amp;lt;= target) start = mid + 1;
             else end = mid - 1;
        }
        return end+1;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;upper_bound/ lower_bound 역시 &lt;strong&gt;algorithm&lt;/strong&gt;헤더에 존재한다.&lt;/p&gt;

&lt;p&gt;binary_search(arr, arr+n, key);	반환형은 true/false&lt;br /&gt;
upper_bound(arr, arr+n, key);  반환형은 iterator&lt;br /&gt;
lower_bound(arr.begin(), arr.end(), key);  반환형은 iterator&lt;br /&gt;
벡터인 경우 lower_bound와 같은 형식으로 작성하면 되고, 일반 배열인 경우 나머지와 같은 형식으로 작성하면 된다.&lt;/p&gt;

&lt;p&gt;반환형이 iterator인 경우 현재 위치가 배열에서 몇 번째 위치인지를 확인하기 위해서는 벡터인 경우 iterator-v.begin(), 배열인 경우 iterator-arr을 하면 된다.&lt;br /&gt;
해당 위치에 있는 값을 출력하고 싶을 때는 printf(“%d”, *iterator); 와 같이 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt;&lt;br /&gt;
항상 위 세가지 함수 모두 정렬을 한다음에 수행해야한다.&lt;/p&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="Binary Search" /><summary type="html">탐색 범위를 절반씩 줄여가며 탐색하는 알고리즘</summary></entry><entry><title type="html">백준 1039번 교환</title><link href="http://localhost:4000/problem/bfs-problem1/" rel="alternate" type="text/html" title="백준 1039번 교환" /><published>2020-02-16T00:00:00+09:00</published><updated>2020-02-16T00:00:00+09:00</updated><id>http://localhost:4000/problem/bfs-problem1</id><content type="html" xml:base="http://localhost:4000/problem/bfs-problem1/">&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;0으로 시작하지 않는 정수 N이 주어진다. 이때, M을 정수 N의 자릿수라고 했을 때, 다음과 같은 연산을 K번 수행한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;1&amp;lt;= i &amp;lt; j &amp;lt;= M인 i와 j를 고른다. 그 다음, i번 위치의 숫자와 j번 위치의 숫자를 바꾼다. 
이때, 바꾼 수가 0으로 시작하면 안된다.&lt;br /&gt;
위의 연산을 K번 했을 때, 나올 수 있는 수의 최댓값을 구하는 프로그램을 작성하시오.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;입력&quot;&gt;입력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 정수 N과 K가 주어진다. N은 1,000,000보다 작거나 같은 자연수이고, K는 10보다 작거나 같은 자연수이다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;참조&lt;br /&gt;
&lt;a href=&quot;https://www.acmicpc.net/problem/1039&quot;&gt;https://www.acmicpc.net/problem/1039&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;p&gt;탐색 시 깊이가 K번째인 경우까지만 탐색하므로 BFS 알고리즘을 사용한다.&lt;br /&gt;
초기 i번 째 깊이에서 교환하여 얻을 수 있는 값들을 모두 queue에 넣는 방식으로 탐색을 수행했지만(visited[]사용 없이) &lt;strong&gt;메모리 초과&lt;/strong&gt;가 발생했다.&lt;br /&gt;
즉, &lt;strong&gt;방문 여부를 확인하여&lt;/strong&gt; 방문된 곳은 queue에 넣지 않는 방식을 사용하여 문제를 풀어야 한다.&lt;br /&gt;
같은 깊이의 값들을 탐색 후 k를 감소시키는 방식을 사용하였으며 k==0인 경우 탐색을 종료하고 탐색시 찾은 최고 높은 값을 반환한다.&lt;/p&gt;

&lt;p&gt;깊이별 포함된 값들을 생각해보자.  (깊이 i)&lt;br /&gt;
i가 홀수인 경우 값 num을 i번 교환하여 얻을 수 있는 값들의 집합은  (i번째에서 교환하여 찾은 값들 + 깊이i 이전 홀수번째 깊이들에서 가능했던 값들)이다.&lt;br /&gt;
마찬가지로 i가 짝수인 경우 값 num을 i번 교환하여 얻을 수 있는 값들의 집합은 (i번째 교환하여 찾은 값들 + 깊이i 이전 짝수번째 깊이들에서 가능했던 값들)이다.&lt;br /&gt;
즉, 홀수끼리 집합이 형성되고 짝수끼리 집합이 형성된다.&lt;br /&gt;
따라서 우리는 최댓값을 찾을 때, &lt;strong&gt;홀수깊이에서의 최댓값과 짝수깊이에서의 최댓값을 따로 구해야한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위에서 언급한 것과 같이 탐색할 때 k를 감소시키는 방향으로 했다. (k가 짝수인 경우, 홀수인 경우를 생각해보자&lt;br /&gt;
k=3인 경우&lt;br /&gt;
→ k=3일 때 같은 깊이 값들 탐색, k=2일 때 같은 깊이 값들 탐색, k=1일 때 같은 깊이 값들 탐색, k=0일 때 탐색 종료 후 반환&lt;br /&gt;
k=2인 경우&lt;br /&gt;
→ k=2일 때 같은 깊이 탐색, k=1일 때 같은 깊이 탐색, k=0일 때 탐색 종료 후 반환&lt;br /&gt;
k가 짝수, 홀수인 경우 두 경우를 모두 볼 때 최종적으로 k=1일 때까지만 탐색을하게 된다.&lt;br /&gt;
즉, 위에서 최댓값을 찾을 때 홀수깊이, 짝수깊이에서의 각각 최댓값을 찾으면 된다했지만 실제로 우리가 사용하는 것은 k의 값이 홀수인 깊이들이다.&lt;br /&gt;
따라서 우리는 k의 값이 홀수인 깊이들에 대해서만 값들을 비교하여 최댓값을 찾으면 된다.&lt;/p&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;queue&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		  
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//방문 여부&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//입력받은 값의 자리수, 교환 횟수&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//값 num에 대한 교환을 쉽게 하기 위해 각 자리 수마다 배열에 넣기&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		  
&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxxO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//k가 홀수 일 때 최댓값&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//이때 qu에는 깊이가 같은 값들만 들어있다.&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//깊이가 같은 값들에 대해서 탐색 수행&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;qu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//swap&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// i, j번째 자리 교환&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//교환된 값은 num에 저장했으므로 원래 자리로 원위치하여 다음 교환을 가능하게 한다.&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxxO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//k가 홀수일 때 값을 비교한다.&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;maxxO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;qu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//같은 깊이 수행 후 k감소&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//k번 수행 완료한 경우 탐색 중단&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxxO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//가장 큰 값을 반환한다.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		  
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;qu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//bfs()시작시 사용할 값을 미리 qu에 넣는다.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//자리수 세기 ex)1234일 경우, m=3 (0번부터 센다)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="BFS" /><category term="graph" /><summary type="html">BFS 알고리즘을 사용한 문제</summary></entry><entry><title type="html">DP(Dynamic Programming)</title><link href="http://localhost:4000/algorithm/dp/" rel="alternate" type="text/html" title=" DP(Dynamic Programming)" /><published>2020-02-16T00:00:00+09:00</published><updated>2020-02-17T00:15:00+09:00</updated><id>http://localhost:4000/algorithm/dp</id><content type="html" xml:base="http://localhost:4000/algorithm/dp/">&lt;h2 id=&quot;dpdynamic-programming---동적-계획법&quot;&gt;&lt;strong&gt;DP(Dynamic Programming) - 동적 계획법&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;큰 문제를 작은 문제로 나눠서 푸는&lt;/strong&gt; 기법을 의미하며, 참고로 알고리즘 이름과 의미는 별개이다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;작은 문제들에 대해 계산한 값을 여러 번 사용할 수 있기 때문에 &lt;strong&gt;메모이제이션&lt;/strong&gt;이 필요&lt;/li&gt;
      &lt;li&gt;점화식을 잘 세우는 것이 중요(식과 초기 값)&lt;/li&gt;
      &lt;li&gt;종류: 1차 배열 dp, 2차 배열 dp …&lt;/li&gt;
      &lt;li&gt;(분할 정복과 차이: 분할 정복은 문제를 분할했을 때 겹치는 문제가 발생 안함)&lt;/li&gt;
      &lt;li&gt;ex) 이항계수(nCr)의 계산, 피보나치 수열(Fn = Fn-1 + Fn-2)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시간 절약을 위한 Memoization
    &lt;ul&gt;
      &lt;li&gt;ex) 이항계수의 계산&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;점화식: Bino(a,b) = Bino(a-1, b) + Bino(a-1, b-1)&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;bino(4,2)를 호출 시 bino()함수가 재귀적으로 호출&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bino(4,2) = bino(3,1) + bino(3,2)
bino(3,1) = bino(2,0) + bino(2,1)
bino(2,1) = bino(1,0) + bino(1,1)
bino(3,2) = bino(2,1) + bino(2,2)
bino(2,1) = bino(1,0) + bino(1,1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;위에 호출된 bino()함수를 볼 때 bino(2,1)이 중복적으로 호출된다. (bino(2,1)에 의해 그 밑 bino(1,0), bino(1,1)도 중복 호출된다.)&lt;/li&gt;
      &lt;li&gt;이 경우 중복된 계산 수행을 방지하여 시간 단축을 가능하게 하는 기법이 memoization이다.&lt;/li&gt;
      &lt;li&gt;계산된 결과를 배열에 저장한 뒤, 다음계산에서 필요한 경우 저장된 값을 불러와 불필요한 함수 호출 및 계산을 하지 않게 한다.&lt;/li&gt;
      &lt;li&gt;(시간 복잡도가 훨씬 줄어들게 됨)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DP 방식
    &lt;ul&gt;
      &lt;li&gt;Top-Down
        &lt;ul&gt;
          &lt;li&gt;일반 재귀와 같은 방식으로 위에서 아래로 내려오는 방식이며, memoization을 사용하기 위해 배열에 계산된 값들을 저장한다.&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;백준 2747번 피보나치 수&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
using namespace std;
		  
int dp[45];	//-1로 초기화 (아직 값이 저장안됨을 의미)
int fbo(int n) {
     if ( dp[n] != -1 ) return dp[n];	//계산된 값 존재하는 경우
     dp[n] = fbo(n-1)+fbo(n-2);	//피보나치 수열 점화식 fbo(n) = fbo(n-1)+fbo(n-2);
     return dp[n];
}
int main() {
     int n;
     scanf(&quot;%d&quot;, &amp;amp;n);
     dp[0] = 0;	//초기값 설정 fbo(0), fbo(1)
     dp[1] = 1;
     for(int i=2; i&amp;lt;=n; i++) dp[i] = -1;
		  
     printf(&quot;%d&quot;, fbo(n));
}	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Bottom-Up
        &lt;ul&gt;
          &lt;li&gt;for문을 이용해서 처음 값부터 다음 값을 계산해 나가는 방식&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;백준 2747번 피보나치 수&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
using namespace std;
		  
int dp[45];  
		  
int main() {
     int n;
     scanf( &quot;%d&quot;, &amp;amp;n );
     dp[0] = 0;	//초기값 설정 fbo(0), fbo(1)
     dp[1] = 1;
     for(int i=2; i&amp;lt;=n; i++) 
          dp[i] = dp[i-1] + dp[i-2];
		  
     printf( &quot;%d&quot;, dp[n] );
}	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;차이
        &lt;ul&gt;
          &lt;li&gt;Top-down 방식에 메모이제이션을 했다는 가정하에 시간 복잡도는 같다.&lt;/li&gt;
          &lt;li&gt;하지만 재귀적으로 함수를 호출하는 과정 때문에 실제 걸리는 시간은 top-down DP가 더 길다고 알려져 있다.&lt;/li&gt;
          &lt;li&gt;Top-down DP의 장점: 점화식 그대로 호출이 되기 때문에 형식/순서에 얽매이지 않고 가독성이 좋다.&lt;/li&gt;
          &lt;li&gt;Bottum-Up DP의 장점: 함수를 호출하지 않으므로 시간/메모리 소량 절약&lt;/li&gt;
          &lt;li&gt;문제에 따라 둘 중 편한 방법을 사용하면 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>육상은</name><email>tkddms150@naver.com</email></author><category term="DP" /><summary type="html">큰 문제를 작은 문제들로 나눠서 푸는 기법</summary></entry></feed>